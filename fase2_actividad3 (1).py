# -*- coding: utf-8 -*-
"""Fase2_Actividad3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f9XAOqc0-V2ESRDPGW828zjhgKNmSCsq
"""

import numpy as np
import matplotlib.pyplot as plt

#alpha = 0.25 # Coeficiente ley de decaimiento
t0 = 0.0     # Tiempo de inicio
tf = 30     # Tiempo final
h = 0.01    # Paso
X0 =20     # Condición inicial
Y0=20
a=1
b=.02
c=1
d=.01
epsilon=.05
nt = int((tf-t0)/h) #número de pasos
X = np.empty(nt+1)
Y=np.empty(nt+1)
X[0]=X0
Y[0]=Y0
for step in range(nt):
  DX=a*X[step]-b*X[step]*Y[step]-epsilon*X[step]
  DY=-c*Y[step]+d*X[step]*Y[step]-epsilon*Y[step]
  X[step+1] = X[step]+h*DX
  Y[step+1]=Y[step]+h*DY

t= np.arange(nt+1) * h

#Xexact = N0 * np.exp(-alpha*t)
plt.plot(t, X,  color='red', label='X')
plt.legend()
plt.show()  

plt.plot(t, Y,  color='green', label='Y')
plt.legend()
plt.show()  


fig, ax = plt.subplots(figsize=(8,6))
#ax.plot(t, Nexact, linestyle='-', label='Exact solution')
ax.plot(t, X,  color='red', label='Forward Euler method')
ax.plot(t, Y,  color='green', label='Forward Euler method')
ax.set_xlabel('$t$')
ax.set_ylabel('$N$')
ax.set_title('Radioactive decay')
ax.legend()
plt.show()  
plt.plot(X,Y)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import integrate
import ipywidgets as ipw
  
a = 1. #mortality rate due to predators
b = 0.02
c = 1.
d = .01
e=.5

x0 = 20.
y0 = 20.

def derivative(X, t, a, b, c, d,e):
    x, y = X
    dotx = x * (a - b * y-e)
    doty = y * (-c + d * x-e)
    return np.array([dotx, doty])
Nt = 1000
tmax = 30.
t = np.linspace(0.,tmax, Nt)
X0 = [x0, y0]
res = integrate.odeint(derivative, X0, t, args = (a, b, c, d,e))
x, y = res.T
plt.figure()
plt.grid()
plt.title("odeint method")
plt.plot(t, x, label = 'X')
plt.plot(t, y,  label = "Y")
plt.xlabel('Time t, [days]')
plt.ylabel('Population')
plt.legend()

plt.show()
plt.plot(x,y)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy import integrate
import ipywidgets as ipw
  
a = 1. #mortality rate due to predators
b = 0.02
c = 1.
d = .01
e=.5
epsilon=e
x0 = 20.
y0 = 20.
X0=x0
Y0=y0
def derivative(X, t, a, b, c, d,e):
    x, y = X
    dotx = x * (a - b * y-e)
    doty = y * (-c + d * x-e)
    return np.array([dotx, doty])
def plotodeintx():
  Nt = 1000
  tmax = 30.
  t = np.linspace(0.,tmax, Nt)
  X0 = [x0, y0]
  res = integrate.odeint(derivative, X0, t, args = (a, b, c, d,e))
  x, y = res.T
  plt.figure()
  plt.grid()
  plt.title("odeint method")
  plt.plot(t, x, label = 'X')

nt = int((tf-t0)/h) #número de pasos
X = np.empty(nt+1)
Y=np.empty(nt+1)
X[0]=X0
Y[0]=Y0
for step in range(nt):
  DX=a*X[step]-b*X[step]*Y[step]-epsilon*X[step]
  DY=-c*Y[step]+d*X[step]*Y[step]-epsilon*Y[step]
  X[step+1] = X[step]+h*DX
  Y[step+1]=Y[step]+h*DY

T= np.arange(nt+1) * h
plt.plot(T, X,  color='red', label='X')
plt.legend()
plt.show()  
plotodeintx()